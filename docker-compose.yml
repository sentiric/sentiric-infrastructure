version: '3.9'

networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  qdrant_data:
  redis_data:
  stt-model-cache:
  whatsapp_session:

services:
  # --- VERİ KATMANI ---
  postgres:
    image: postgres:16-alpine
    container_name: sentiric-postgres-1
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine
    container_name: sentiric-rabbitmq-1
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports: ["15672:15672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: sentiric-redis-1
    volumes: [redis_data:/data]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: sentiric-qdrant-1
    ports: ["${VECTOR_DB_PORT:-6333}:6333"]
    volumes: [qdrant_data:/qdrant/storage]
    networks: [sentiric-net]
    restart: always

  # --- GO & RUST SERVİSLERİ (ENVIRONMENT İLE) ---
  user-service:
    build:
      context: ../sentiric-user-service
      args: { SERVICE_NAME: sentiric-user-service }
    container_name: sentiric-user-service-1
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - USER_SERVICE_GRPC_PORT=${USER_SERVICE_GRPC_PORT}
      - USER_SERVICE_CERT_PATH=${USER_SERVICE_CERT_PATH}
      - USER_SERVICE_KEY_PATH=${USER_SERVICE_KEY_PATH}
      - GRPC_TLS_CA_PATH=${GRPC_TLS_CA_PATH}
      - ENV=${ENV}
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  dialplan-service:
    build:
      context: ../sentiric-dialplan-service
      args: { SERVICE_NAME: sentiric-dialplan-service }
    container_name: sentiric-dialplan-service-1
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - DIALPLAN_SERVICE_GRPC_PORT=${DIALPLAN_SERVICE_GRPC_PORT}
      - DIALPLAN_SERVICE_CERT_PATH=${DIALPLAN_SERVICE_CERT_PATH}
      - DIALPLAN_SERVICE_KEY_PATH=${DIALPLAN_SERVICE_KEY_PATH}
      - GRPC_TLS_CA_PATH=${GRPC_TLS_CA_PATH}
      - ENV=${ENV}
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  agent-service:
    build:
      context: ../sentiric-agent-service
      args: { SERVICE_NAME: sentiric-agent-service }
    container_name: sentiric-agent-service-1
    environment:
      - ENV=${ENV}
      - POSTGRES_URL=${POSTGRES_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - AGENT_QUEUE_NAME=call.events
      - LLM_SERVICE_HOST=${LLM_SERVICE_HOST}
      - LLM_SERVICE_PORT=${LLM_SERVICE_PORT}
      - LLM_SERVICE_TLS_ENABLED=${LLM_SERVICE_TLS_ENABLED}
      - TTS_SERVICE_HOST=${TTS_SERVICE_HOST}
      - TTS_SERVICE_PORT=${TTS_SERVICE_PORT}
      - TTS_SERVICE_TLS_ENABLED=${TTS_SERVICE_TLS_ENABLED}
      - MEDIA_SERVICE_GRPC_URL=${MEDIA_SERVICE_GRPC_URL}
      - USER_SERVICE_GRPC_URL=${USER_SERVICE_GRPC_URL}
      - AGENT_SERVICE_CERT_PATH=${AGENT_SERVICE_CERT_PATH}
      - AGENT_SERVICE_KEY_PATH=${AGENT_SERVICE_KEY_PATH}
      - GRPC_TLS_CA_PATH=${GRPC_TLS_CA_PATH}
      - METRICS_PORT=${METRICS_PORT}
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["9091:9091"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }

  api-gateway:
    build:
      context: ../sentiric-api-gateway-service
      args: { SERVICE_NAME: sentiric-api-gateway-service }
    container_name: sentiric-api-gateway-1
    environment:
      - API_GATEWAY_SERVICE_PORT=${API_GATEWAY_SERVICE_PORT}
      - USER_SERVICE_GRPC_URL=${USER_SERVICE_GRPC_URL}
      - API_GATEWAY_SERVICE_CERT_PATH=${API_GATEWAY_SERVICE_CERT_PATH}
      - API_GATEWAY_SERVICE_KEY_PATH=${API_GATEWAY_SERVICE_KEY_PATH}
      - GRPC_TLS_CA_PATH=${GRPC_TLS_CA_PATH}
      - ENV=${ENV}
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${API_GATEWAY_SERVICE_PORT:-8080}:8080"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  cdr-service:
    build:
      context: ../sentiric-cdr-service
      args: { SERVICE_NAME: sentiric-cdr-service }
    container_name: sentiric-cdr-service-1
    environment:
      - POSTGRES_URL=${POSTGRES_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - CDR_QUEUE_NAME=call.events
      - METRICS_PORT=9092
      - ENV=${ENV}
    ports: ["${CDR_SERVICE_PORT:-5004}:5004", "9092:9092"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }

  media-service:
    build:
      context: ../sentiric-media-service
      args: { SERVICE_NAME: sentiric-media-service }
    container_name: sentiric-media-service-1
    environment:
      - MEDIA_SERVICE_GRPC_PORT=${MEDIA_SERVICE_GRPC_PORT}
      - RTP_SERVICE_LISTEN_ADDRESS=0.0.0.0
      - RTP_SERVICE_PORT_MIN=${RTP_SERVICE_PORT_MIN}
      - RTP_SERVICE_PORT_MAX=${RTP_SERVICE_PORT_MAX}
      - RTP_SERVICE_PORT_QUARANTINE_SECONDS=${RTP_SERVICE_PORT_QUARANTINE_SECONDS}
      - ASSETS_BASE_PATH=${ASSETS_BASE_PATH}
      - MEDIA_SERVICE_CERT_PATH=${MEDIA_SERVICE_CERT_PATH}
      - MEDIA_SERVICE_KEY_PATH=${MEDIA_SERVICE_KEY_PATH}
      - GRPC_TLS_CA_PATH=${GRPC_TLS_CA_PATH}
      - ENV=${ENV}
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  sip-signaling:
    build:
      context: ../sentiric-sip-signaling-service
      args: { SERVICE_NAME: sentiric-sip-signaling }
    container_name: sentiric-sip-signaling-1
    environment:
      - SIP_SIGNALING_SERVICE_PORT=5060
      - PUBLIC_IP=${PUBLIC_IP}
      - DIALPLAN_SERVICE_GRPC_URL=${DIALPLAN_SERVICE_GRPC_URL}
      - MEDIA_SERVICE_GRPC_URL=${MEDIA_SERVICE_GRPC_URL}
      - USER_SERVICE_GRPC_URL=${USER_SERVICE_GRPC_URL}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - SIP_SIGNALING_SERVICE_CERT_PATH=${SIP_SIGNALING_SERVICE_CERT_PATH}
      - SIP_SIGNALING_SERVICE_KEY_PATH=${SIP_SIGNALING_SERVICE_KEY_PATH}
      - GRPC_TLS_CA_PATH=${GRPC_TLS_CA_PATH}
      - ENV=${ENV}
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      rabbitmq: { condition: service_healthy }
      media-service: { condition: service_started }

  sip-gateway:
    build:
      context: ../sentiric-sip-gateway-service
      args: { SERVICE_NAME: sentiric-sip-gateway }
    container_name: sentiric-sip-gateway-1
    environment:
      - SIP_GATEWAY_SERVICE_PORT=${SIP_GATEWAY_SERVICE_PORT}
      - SIP_SIGNALING_SERVICE_HOST=sip-signaling
      - SIP_SIGNALING_SERVICE_PORT=5060
      - ENV=${ENV}
    ports: ["${SIP_GATEWAY_SERVICE_PORT:-5060}:5060/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: [sip-signaling]

  # --- NODE.JS & PYTHON SERVİSLERİ (ENV_FILE İLE) ---
  connectors-service:
    build: { context: ../sentiric-connectors-service }
    container_name: sentiric-connectors-service-1
    env_file: ../sentiric-config/environments/${ENV}.env
    ports: ["${CONNECTOR_SERVICE_PORT:-5005}:5005"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  task-service:
    build: { context: ../sentiric-task-service }
    container_name: sentiric-task-service-api-1
    env_file: ../sentiric-config/environments/${ENV}.env
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "5003"]
    ports: ["${TASK_SERVICE_PORT:-5003}:5003"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, redis: { condition: service_healthy } }

  task-service-worker:
    build: { context: ../sentiric-task-service }
    container_name: sentiric-task-service-worker-1
    env_file: ../sentiric-config/environments/${ENV}.env
    user: "sentiric_user"
    command: ["celery", "-A", "app.core.celery_app", "worker", "-l", "info"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, redis: { condition: service_healthy } }

  flower:
    build: { context: ../sentiric-task-service }
    container_name: sentiric-flower-1
    env_file: ../sentiric-config/environments/${ENV}.env
    command: ["celery", "-A", "app.core.celery_app", "--broker=${RABBITMQ_URL}", "flower"]
    ports: ["${FLOWER_PORT:-5555}:5555"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      rabbitmq: { condition: service_healthy }
      task-service-worker: { condition: service_started }

  llm-service:
    build: { context: ../sentiric-llm-service }
    container_name: sentiric-llm-service-1
    env_file: ../sentiric-config/environments/${ENV}.env
    networks: [sentiric-net]
    restart: always
    depends_on: [agent-service]

  stt-service:
    build: { context: ../sentiric-stt-service }
    container_name: sentiric-stt-service-1
    env_file: ../sentiric-config/environments/${ENV}.env
    volumes: [stt-model-cache:/root/.cache]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

# --- YENİ SES ORKESTRASYON KATMANI ---
  tts-gateway:
    build: { context: ../sentiric-tts-gateway }
    container_name: sentiric-tts-gateway-1
    # DİKKAT: Henüz bir env dosyası yok, environment direkt olarak verilecek
    environment:
      - ENV=${ENV}
      - LOG_LEVEL=${LOG_LEVEL}
      - RUST_LOG=${RUST_LOG}
      - REDIS_URL=${REDIS_URL}
      - EDGE_TTS_URL=http://edge-tts-service:5002
      - COQUI_TTS_URL=http://coqui-tts-service:5002
      - ELEVENLABS_TTS_URL=http://elevenlabs-tts-service:5002
    ports: ["${TTS_GATEWAY_PORT:-50051}:50051"] # gRPC portu
    networks: [sentiric-net]
    restart: always
    depends_on: { redis: { condition: service_healthy } }

  edge-tts-service:
    build: { context: ../sentiric-edge-tts-service }
    container_name: sentiric-edge-tts-1
    env_file: ../sentiric-config/environments/${ENV}.env
    networks: [sentiric-net]
    restart: always
  
  coqui-tts-service:
    build: { context: ../sentiric-coqui-tts-service }
    container_name: sentiric-coqui-tts-1
    env_file: ../sentiric-config/environments/${ENV}.env
    networks: [sentiric-net]
    restart: always

  tts-service:
    build: { context: ../sentiric-tts-service }
    container_name: sentiric-tts-service-1
    env_file: ../sentiric-config/environments/${ENV}.env
    networks: [sentiric-net]
    restart: always
    depends_on: [agent-service]

  knowledge-service:
    build: { context: ../sentiric-knowledge-service }
    container_name: sentiric-knowledge-service-1
    env_file: ../sentiric-config/environments/${ENV}.env
    ports: ["${KNOWLEDGE_SERVICE_PORT:-50055}:50055"]
    volumes: ["./data:/app/data"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      qdrant: { condition: service_started }

  messaging-gateway:
    build: { context: ../sentiric-messaging-gateway-service }
    container_name: sentiric-messaging-gateway-1
    env_file: ../sentiric-config/environments/${ENV}.env
    volumes: [whatsapp_session:/app/wweb_auth]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy } }

  # --- UI SERVİSLERİ ---
  dashboard-ui:
    build: { context: ../sentiric-dashboard-ui }
    container_name: sentiric-dashboard-ui-1
    env_file: ../sentiric-config/environments/${ENV}.env
    ports: ["${DASHBOARD_UI_PORT:-3000}:80"]
    networks: [sentiric-net]
    restart: always
    depends_on: [api-gateway]

  web-agent-ui:
    build: { context: ../sentiric-web-agent-ui }
    container_name: sentiric-web-agent-ui-1
    env_file: ../sentiric-config/environments/${ENV}.env
    ports: ["${WEB_AGENT_UI_PORT:-3001}:80"]
    networks: [sentiric-net]
    restart: always
    depends_on: [api-gateway]