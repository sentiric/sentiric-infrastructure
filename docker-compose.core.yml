networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  qdrant_data:
  redis_data:
  stt-model-cache:
  whatsapp_session:

services:
  # --- VERİ KATMANI ---
  postgres:
    image: postgres:16-alpine
    container_name: sentiric-postgres-1
    env_file:
      - .env.generated
    # prod ortamı yerel sunucumuzda olduğu için açılabilir diye düşünüyorum.
    ports: ["5432:5432"]      
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine
    container_name: sentiric-rabbitmq-1
    env_file:
      - .env.generated
    ports: ["15672:15672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: sentiric-redis-1
    volumes: [redis_data:/data]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: sentiric-qdrant-1
    ports: ["${VECTOR_DB_PORT:-6333}:6333"]
    volumes: [qdrant_data:/qdrant/storage]
    networks: [sentiric-net]
    restart: always

  # --- GO & RUST SERVİSLERİ ---
  user-service:
    image: ghcr.io/sentiric/sentiric-user-service:${TAG:-latest}
    container_name: sentiric-user-service-1
    env_file:
      - .env.generated
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  dialplan-service:
    image: ghcr.io/sentiric/sentiric-dialplan-service:${TAG:-latest}
    container_name: sentiric-dialplan-service-1
    env_file:
      - .env.generated
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  agent-service:
    image: ghcr.io/sentiric/sentiric-agent-service:${TAG:-latest}
    container_name: sentiric-agent-service-1
    env_file:
      - .env.generated
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["9091:9091"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }

  api-gateway:
    image: ghcr.io/sentiric/sentiric-api-gateway-service:${TAG:-latest}
    container_name: sentiric-api-gateway-1
    env_file:
      - .env.generated
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${API_GATEWAY_SERVICE_PORT:-8080}:8080"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  cdr-service:
    image: ghcr.io/sentiric/sentiric-cdr-service:${TAG:-latest}
    container_name: sentiric-cdr-service-1
    env_file:
      - .env.generated
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"] 
    ports: ["${CDR_SERVICE_PORT:-5004}:5004", "9092:9092"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }

  media-service:
    image: ghcr.io/sentiric/sentiric-media-service:${TAG:-latest}
    container_name: sentiric-media-service-1
    env_file:
      - .env.generated
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  sip-signaling:
    image: ghcr.io/sentiric/sentiric-sip-signaling-service:${TAG:-latest}
    container_name: sentiric-sip-signaling-1
    env_file:
      - .env.generated
    # Bu port kullanım durumuna göre açılıp kapanabilir yada alternatif bir yaklaşım.
    # Yad dahili ağda güvenli iletişim portuna geçebilir. VPC Kullanım senaryoları için açmayı planlamıştır.
    # Vpc de api-gateway i çalıştırıyoruz yerel de yine api-gateway i tekrar çalıştırıyoruz. gateway to gateway
    # ports: ["${SIP_SIGNALING_SERVICE_PORT:-5060}:${SIP_SIGNALING_SERVICE_PORT:-5060}/udp"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      rabbitmq: { condition: service_healthy }
      media-service: { condition: service_started }

  # sip-gateway:
  #   image: ghcr.io/sentiric/sentiric-sip-gateway-service:${TAG:-latest}
  #   container_name: sentiric-sip-gateway-1
  #   env_file:
  #     - .env.generated
  #   ports: ["${SIP_GATEWAY_SERVICE_PORT:-5060}:${SIP_GATEWAY_LISTEN_PORT:-5060}/udp"]
  #   networks: [sentiric-net]
  #   restart: always
  #   depends_on:
  #     # DÜZELTME: Sadece başlatılmasını değil, çalışır durumda olmasını bekle
  #     sip-signaling:
  #       condition: service_started

  # --- NODE.JS & PYTHON SERVİSLERİ ---
  connectors-service:
    image: ghcr.io/sentiric/sentiric-connectors-service:${TAG:-latest}
    container_name: sentiric-connectors-service-1
    env_file:
      - .env.generated
    ports: ["${CONNECTOR_SERVICE_PORT:-5005}:5005"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  task-service:
    image: ghcr.io/sentiric/sentiric-task-service:${TAG:-latest}
    container_name: sentiric-task-service-api-1
    env_file:
      - .env.generated
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "5003"]
    ports: ["${TASK_SERVICE_PORT:-5003}:5003"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, redis: { condition: service_healthy } }

  task-service-worker:
    image: ghcr.io/sentiric/sentiric-task-service:${TAG:-latest}
    container_name: sentiric-task-service-worker-1
    env_file:
      - .env.generated
    user: "sentiric_user"
    command: ["celery", "-A", "app.core.celery_app", "worker", "-l", "info"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, redis: { condition: service_healthy } }

  flower:
    image: ghcr.io/sentiric/sentiric-task-service:${TAG:-latest}
    container_name: sentiric-flower-1
    env_file:
      - .env.generated
    command: ["celery", "-A", "app.core.celery_app", "--broker=${RABBITMQ_URL}", "flower"]
    ports: ["${FLOWER_PORT:-5555}:5555"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      rabbitmq: { condition: service_healthy }
      task-service-worker: { condition: service_started }

  llm-service:
    image: ghcr.io/sentiric/sentiric-llm-service:${TAG:-latest}
    container_name: sentiric-llm-service-1
    env_file:
      - .env.generated
    networks: [sentiric-net]
    restart: always
    depends_on: [agent-service]

  stt-service:
    image: ghcr.io/sentiric/sentiric-stt-service:${TAG:-latest}
    container_name: sentiric-stt-service-1
    env_file:
      - .env.generated
    volumes: [stt-model-cache:/root/.cache]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # ... Diğer Python/Node servisleri de aynı şekilde güncellenmeli ...
  # Şimdilik tts-gateway ve diğerlerini de env_file'a çevirelim
  
  # tts-gateway:
  #   image: ghcr.io/sentiric/sentiric-tts-gateway-service:${TAG:-latest}
  #   container_name: sentiric-tts-gateway-1
  #   env_file:
  #     - .env.generated
  #   ports: ["${TTS_GATEWAY_PORT:-50051}:50051"]
  #   networks: [sentiric-net]
  #   restart: always
  #   depends_on: { redis: { condition: service_healthy } }

  # edge-tts-service:
  #   image: ghcr.io/sentiric/sentiric-edge-tts-service:${TAG:-latest}
  #   container_name: sentiric-edge-tts-1
  #   env_file:
  #     - .env.generated
  #   networks: [sentiric-net]
  #   restart: always
  
  # coqui-tts-service:
  #   image: ghcr.io/sentiric/sentiric-coqui-tts-service:${TAG:-latest}
  #   container_name: sentiric-coqui-tts-1
  #   env_file:
  #     - .env.generated
  #   networks: [sentiric-net]
  #   restart: always
    
  knowledge-service:
    image: ghcr.io/sentiric/sentiric-knowledge-service:${TAG:-latest}
    container_name: sentiric-knowledge-service-1
    env_file:
      - .env.generated
    ports: ["${KNOWLEDGE_SERVICE_PORT:-50055}:50055"]
    volumes: ["./data:/app/data"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      postgres: { condition: service_healthy }
      qdrant: { condition: service_started }

  messaging-gateway:
    image: ghcr.io/sentiric/sentiric-messaging-gateway-service:${TAG:-latest}
    container_name: sentiric-messaging-gateway-1
    env_file:
      - .env.generated
    volumes: [whatsapp_session:/app/wweb_auth]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy } }

  # --- UI SERVİSLERİ ---
  dashboard-ui:
    image: ghcr.io/sentiric/sentiric-dashboard-ui:${TAG:-latest}
    container_name: sentiric-dashboard-ui-1
    env_file:
      - .env.generated
    ports: ["${DASHBOARD_UI_PORT:-3000}:80"]
    networks: [sentiric-net]
    restart: always
    depends_on: [api-gateway]

  web-agent-ui:
    image: ghcr.io/sentiric/sentiric-web-agent-ui:${TAG:-latest}
    container_name: sentiric-web-agent-ui-1
    env_file:
      - .env.generated
    ports: ["${WEB_AGENT_UI_PORT:-3001}:80"]
    networks: [sentiric-net]
    restart: always
    depends_on: [api-gateway]