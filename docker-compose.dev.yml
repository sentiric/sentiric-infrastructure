# docker-compose.dev.yml
networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  qdrant_data:
  redis_data:
  stt-model-cache:
  whatsapp_session:

services:
  # --- VERİ KATMANI ---
  postgres:
    image: postgres:16-alpine
    container_name: sentiric-dev-postgres-1
    env_file: [".env.generated"]
    ports: ["5432:5432"]
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:4.1.0-management-alpine # DÜZELTME: Versiyonu core ile aynı yapıyoruz (3.13 -> 4.1.0)
    container_name: sentiric-dev-rabbitmq-1
    env_file: [".env.generated"]
    ports: ["15672:15672"]
    volumes: [rabbitmq_data:/var/lib/rabbitmq/]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      
  redis:
    image: redis:7-alpine
    container_name: sentiric-dev-redis-1
    volumes: [redis_data:/data]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  qdrant:
    image: qdrant/qdrant:latest
    container_name: sentiric-dev-qdrant-1
    ports: ["${VECTOR_DB_PORT:-6333}:6333"]
    volumes: [qdrant_data:/qdrant/storage]
    networks: [sentiric-net]
    restart: always

  flower:
      image: mher/flower
      container_name: sentiric-dev-flower-1
      env_file: [".env.generated"]
      ports: ["${FLOWER_PORT:-5555}:5555"]
      networks: [sentiric-net]
      restart: always
      depends_on:
        rabbitmq:
          condition: service_healthy
        task-service-worker:
          condition: service_started
          
  # --- UYGULAMA SERVİSLERİ (KAYNAK KODDAN İNŞA EDİLİR) ---
  user-service:
    container_name: sentiric-dev-user-service-1
    build: { context: ../sentiric-user-service, args: { SERVICE_NAME: sentiric-user-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  dialplan-service:
    container_name: sentiric-dev-dialplan-service-1
    build: { context: ../sentiric-dialplan-service, args: { SERVICE_NAME: sentiric-dialplan-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  agent-service:
    container_name: sentiric-dev-agent-service-1
    build: { context: ../sentiric-agent-service, args: { SERVICE_NAME: sentiric-agent-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${METRICS_PORT_AGENT:-9091}:9091"]
    networks: [sentiric-net]
    restart: always
    depends_on: 
      postgres: 
        condition: service_healthy 
      rabbitmq: 
        condition: service_healthy
      tts-gateway:
        condition: service_healthy

  cdr-service:
    container_name: sentiric-dev-cdr-service-1
    build: { context: ../sentiric-cdr-service, args: { SERVICE_NAME: sentiric-cdr-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${CDR_SERVICE_PORT:-5004}:5004", "${METRICS_PORT_CDR:-9092}:9092"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy }, rabbitmq: { condition: service_healthy } }

  media-service:
    container_name: sentiric-dev-media-service-1
    build: { context: ../sentiric-media-service, args: { SERVICE_NAME: sentiric-media-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  sip-signaling:
    container_name: sentiric-dev-sip-signaling-1
    build: { context: ../sentiric-sip-signaling-service, args: { SERVICE_NAME: sentiric-sip-signaling-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, media-service: { condition: service_started } }

  sip-gateway:
    container_name: sentiric-dev-sip-gateway-1
    build: { context: ../sentiric-sip-gateway-service, args: { SERVICE_NAME: sentiric-sip-gateway-service } }
    env_file: [".env.generated"]
    ports: ["${SIP_GATEWAY_SERVICE_PORT:-5060}:${SIP_GATEWAY_LISTEN_PORT:-5060}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: { sip-signaling: { condition: service_started } }

  api-gateway:
    container_name: sentiric-dev-api-gateway-1
    build: { context: ../sentiric-api-gateway-service, args: { SERVICE_NAME: sentiric-api-gateway-service } }
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${API_GATEWAY_SERVICE_PORT:-8080}:8080"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  connectors-service:
    container_name: sentiric-dev-connectors-service-1
    build: { context: ../sentiric-connectors-service }
    env_file: [".env.generated"]
    ports: ["${CONNECTOR_SERVICE_PORT:-5005}:5005"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  task-service:
    container_name: sentiric-dev-task-service-api-1
    build: { context: ../sentiric-task-service }
    env_file: [".env.generated"]
    command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "5003"]
    ports: ["${TASK_SERVICE_PORT:-5003}:5003"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, redis: { condition: service_healthy } }

  task-service-worker:
    container_name: sentiric-dev-task-service-worker-1
    build: { context: ../sentiric-task-service }
    env_file: [".env.generated"]
    user: "sentiric_user"
    command: ["celery", "-A", "app.core.celery_app", "worker", "-l", "info"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, redis: { condition: service_healthy } }

  llm-service:
    container_name: sentiric-dev-llm-service-1
    build: { context: ../sentiric-llm-service }
    env_file: [".env.generated"]
    ports: ["${LLM_SERVICE_PORT:-7860}:7860"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      agent-service:
        condition: service_started

  stt-service:
    container_name: sentiric-dev-stt-service-1
    build: { context: ../sentiric-stt-service }
    env_file: [".env.generated"]
    volumes: [stt-model-cache:/root/.cache]
    ports: ["${STT_SERVICE_PORT:-5001}:5001"]
    networks: [sentiric-net]
    restart: always
    healthcheck: { test: ["CMD", "curl", "-f", "http://localhost:5001/health"], interval: 30s, timeout: 10s, retries: 3, start_period: 120s }

  # --- SES ORKESTRASYON KATMANI ---
  tts-gateway:
    container_name: sentiric-dev-tts-gateway-1
    build: 
      context: ../sentiric-tts-gateway-service
      args: 
        SERVICE_NAME: sentiric-tts-gateway-service
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]    
    ports: ["${TTS_GATEWAY_PORT:-50051}:50051"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      tts-coqui-service:
        condition: service_healthy
      tts-edge-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  tts-coqui-service:
    container_name: sentiric-dev-tts-coqui-1
    build: { context: ../sentiric-tts-coqui-service }
    env_file: [".env.generated"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 5m

  tts-edge-service:
    container_name: sentiric-dev-tts-edge-1
    build: { context: ../sentiric-tts-edge-service }
    env_file: [".env.generated"]
    ports: ["${TTS_EDGE_SERVICE_PORT:-5006}:5006"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      # DÜZELTME: Healthcheck portunu 5002'den 5006'ya düzeltiyoruz.
      # Servisin kendi portunu kontrol etmesi gerekir.
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  knowledge-service:
    container_name: sentiric-dev-knowledge-service-1
    build: { context: ../sentiric-knowledge-service }
    env_file: [".env.generated"]
    ports: ["${KNOWLEDGE_SERVICE_PORT:-50055}:50055"]
    volumes: ["./data:/app/data"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy }, qdrant: { condition: service_started } }

  messaging-gateway:
    container_name: sentiric-dev-messaging-gateway-1
    build: { context: ../sentiric-messaging-gateway-service }
    # DÜZELTME: Bu 'command' satırını tamamen siliyoruz.
    # Sorumluluk artık messaging-gateway'in kendi Dockerfile'ında.
    env_file: [".env.generated"]
    volumes: [whatsapp_session:/app/wweb_auth]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy } }
    
  dashboard-ui:
    container_name: sentiric-dev-dashboard-ui-1
    build: { context: ../sentiric-dashboard-ui }
    env_file: [".env.generated"]
    ports: ["${DASHBOARD_UI_PORT:-3000}:80"]
    networks: [sentiric-net]
    restart: always
    depends_on: [api-gateway]

  web-agent-ui:
    container_name: sentiric-dev-web-agent-ui-1
    build: { context: ../sentiric-web-agent-ui }
    env_file: [".env.generated"]
    ports: ["${WEB_AGENT_UI_PORT:-3001}:80"]
    networks: [sentiric-net]
    restart: always
    depends_on: [api-gateway]