# docker-compose.free.yml

networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

volumes:
  postgres_data:
  rabbitmq_data:
  redis_data:

services:
  # --- ZORUNLU VERİ KATMANI ---
  # neon.teach
  # postgres:
  #   image: postgres:16-alpine
  #   container_name: sentiric-free-postgres-1
  #   env_file: [".env.generated"]
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #     - ${CONFIG_REPO_PATH}/postgres-init:/docker-entrypoint-initdb.d
  #   networks: [sentiric-net]
  #   restart: always
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # cloudamqp
  # rabbitmq:
  #   image: rabbitmq:4.1.0-management-alpine
  #   container_name: sentiric-free-rabbitmq-1
  #   env_file: [".env.generated"]
  #   volumes: [rabbitmq_data:/var/lib/rabbitmq/]
  #   networks: [sentiric-net]
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "rabbitmq-diagnostics", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

  # upstash   
  # redis:
  #   image: redis:7-alpine
  #   container_name: sentiric-free-redis-1
  #   volumes: [redis_data:/data]
  #   networks: [sentiric-net]
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  # --- ÇEKİRDEK UYGULAMA SERVİSLERİ (ÇAĞRI AKIŞI İÇİN ZORUNLU) ---
  user-service:
    image: ghcr.io/sentiric/sentiric-user-service:${TAG:-latest}
    container_name: sentiric-free-user-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  dialplan-service:
    image: ghcr.io/sentiric/sentiric-dialplan-service:${TAG:-latest}
    container_name: sentiric-free-dialplan-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { postgres: { condition: service_healthy } }

  media-service:
    image: ghcr.io/sentiric/sentiric-media-service:${TAG:-latest}
    container_name: sentiric-free-media-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  tts-edge-service:
    image: ghcr.io/sentiric/sentiric-tts-edge-service:${TAG:-latest}
    container_name: sentiric-free-tts-edge-1
    env_file: [".env.generated"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  tts-gateway:
    image: ghcr.io/sentiric/sentiric-tts-gateway-service:${TAG:-latest}
    container_name: sentiric-free-tts-gateway-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      tts-edge-service: { condition: service_healthy }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  agent-service:
    image: ghcr.io/sentiric/sentiric-agent-service:${TAG:-latest}
    container_name: sentiric-free-agent-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: 
      postgres: { condition: service_healthy }
      rabbitmq: { condition: service_healthy }
      tts-gateway: { condition: service_healthy }

  llm-service:
    image: ghcr.io/sentiric/sentiric-llm-service:${TAG:-latest}
    container_name: sentiric-free-llm-service-1
    env_file: [".env.generated"]
    networks: [sentiric-net]
    restart: always
    depends_on: { agent-service: { condition: service_started } }

  sip-signaling:
    image: ghcr.io/sentiric/sentiric-sip-signaling-service:${TAG:-latest}
    container_name: sentiric-free-sip-signaling-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: { rabbitmq: { condition: service_healthy }, media-service: { condition: service_started } }

  sip-gateway:
    image: ghcr.io/sentiric/sentiric-sip-gateway-service:${TAG:-latest}
    container_name: sentiric-free-sip-gateway-1
    env_file: [".env.generated"]
    ports: ["${SIP_GATEWAY_SERVICE_PORT:-5060}:${SIP_GATEWAY_LISTEN_PORT:-5060}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: { sip-signaling: { condition: service_started } }