# docker-compose.free.yml
# SENTIRIC - BEDAVA KATMAN (FREE TIER)
# Bu profil, veri katmanı için yönetilen bulut servislerini (Neon, CloudAMQP, Upstash) kullanır
# ve sadece gerekli uygulama servislerini çalıştırır.

networks:
  sentiric-net:
    name: ${NETWORK_NAME:-sentiric-net}
    driver: bridge

services:
  # --- VERİ KATMANI (YÖNETİLEN SERVİSLER KULLANILDIĞI İÇİN YORUM SATIRI) ---
  # .env.generated dosyasındaki POSTGRES_URL, RABBITMQ_URL, REDIS_URL
  # değişkenleri buluttaki adresleri göstermelidir.
   
  # --- ÇEKİRDEK UYGULAMA SERVİSLERİ ---
  user-service:
    image: ghcr.io/sentiric/sentiric-user-service:${TAG:-latest}
    container_name: sentiric-free-user-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always

  dialplan-service:
    image: ghcr.io/sentiric/sentiric-dialplan-service:${TAG:-latest}
    container_name: sentiric-free-dialplan-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always

  media-service:
    image: ghcr.io/sentiric/sentiric-media-service:${TAG:-latest}
    container_name: sentiric-free-media-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    ports: ["${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}:${RTP_SERVICE_PORT_MIN}-${RTP_SERVICE_PORT_MAX}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on: [user-service, dialplan-service]

  tts-edge-service:
    image: ghcr.io/sentiric/sentiric-tts-edge-service:${TAG:-latest}
    container_name: sentiric-free-tts-edge-1
    env_file: [".env.generated"]
    networks: [sentiric-net]
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  tts-gateway:
    image: ghcr.io/sentiric/sentiric-tts-gateway-service:${TAG:-latest}
    container_name: sentiric-free-tts-gateway-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      tts-edge-service: { condition: service_healthy }
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "50051"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  agent-service:
    image: ghcr.io/sentiric/sentiric-agent-service:${TAG:-latest}
    container_name: sentiric-free-agent-service-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on: 
      - tts-gateway
      # DİKKAT: Bağımlılıkları bu şekilde liste olarak vermek daha güvenilirdir.
      # Servisin başlaması için tts-gateway'in sağlıklı olmasını bekleyecek.
      - llm-service

  llm-service:
    image: ghcr.io/sentiric/sentiric-llm-service:${TAG:-latest}
    container_name: sentiric-free-llm-service-1
    env_file: [".env.generated"]
    networks: [sentiric-net]
    restart: always

  sip-signaling:
    image: ghcr.io/sentiric/sentiric-sip-signaling-service:${TAG:-latest}
    container_name: sentiric-free-sip-signaling-1
    env_file: [".env.generated"]
    volumes: ["${CONFIG_REPO_PATH}/tls/certs:/etc/sentiric/tls:ro"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      - media-service

  sip-gateway:
    image: ghcr.io/sentiric/sentiric-sip-gateway-service:${TAG:-latest}
    container_name: sentiric-free-sip-gateway-1
    env_file: [".env.generated"]
    ports: ["${SIP_GATEWAY_SERVICE_PORT:-5060}:${SIP_GATEWAY_LISTEN_PORT:-5060}/udp"]
    networks: [sentiric-net]
    restart: always
    depends_on:
      - sip-signaling

  # çok fazla bağlantı kullanıyor uptime kuma kullanılacak
  # flower:
  #   image: mher/flower
  #   container_name: sentiric-free-flower-1
  #   env_file: [".env.generated"]
  #   ports: ["${FLOWER_PORT:-5555}:5555"]
  #   networks: [sentiric-net]
  #   restart: always    

  # task-service-api:
  #   image: ghcr.io/sentiric/sentiric-task-service:${TAG:-latest}
  #   container_name: sentiric-free-task-service-api-1
  #   env_file: [".env.generated"]
  #   command: ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "5003"]
  #   networks: [sentiric-net]
  #   restart: always


  # task-service-worker:
  #   image: ghcr.io/sentiric/sentiric-task-service:${TAG:-latest}
  #   container_name: sentiric-free-task-service-worker-1
  #   env_file: [".env.generated"]
  #   user: "sentiric_user"
  #   command: ["celery", "-A", "app.core.celery_app", "worker", "-l", "info", "--concurrency=2"]
  #   networks: [sentiric-net]
  #   restart: always

  # task-service-beat:
  #   image: ghcr.io/sentiric/sentiric-task-service:${TAG:-latest}
  #   container_name: sentiric-free-task-service-beat-1
  #   env_file: [".env.generated"]
  #   user: "sentiric_user"
  #   command: ["celery", "-A", "app.core.celery_app", "beat", "-l", "info"]
  #   networks: [sentiric-net]
  #   restart: always    

  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: sentiric-free-uptime-kuma
    env_file: [".env.generated"]
    restart: always
    ports:
      - "3001:3001"  # Uptime Kuma arayüzü için
    networks: [sentiric-net]      
    volumes:
      - uptime-kuma-data:/app/data 

volumes:
  uptime-kuma-data: